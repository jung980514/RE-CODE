plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ✅ Spring Web + Validation
    implementation 'org.springframework.boot:spring-boot-starter-web'           // MVC & REST API
    implementation 'org.springframework.boot:spring-boot-starter-validation'    // @Valid 등 유효성 검사

    // ✅ Spring WebFlux (비동기 WebClient 등)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // ✅ Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // ✅ Database Driver
    runtimeOnly 'com.mysql:mysql-connector-j'           // MySQL DB 연동
    runtimeOnly 'com.h2database:h2'                     // 인메모리 DB (테스트용)

    // ✅ AWS SDK (S3 사용)
    implementation 'software.amazon.awssdk:s3:2.20.0'

    // ✅ JSON 직렬화/역직렬화
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // ✅ Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ✅ 서블릿 관련 (필요 시)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // ✅ 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.security:spring-security-test'

    // ✅ swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // ✅ JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // ✅ Spring Security + Oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // ✅ 레디스
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // ✅ Actuator (모니터링용)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // env 파일 읽기
    implementation 'io.github.cdimascio:dotenv-java:2.2.4'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

def generated = "src/main/generated"

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}
