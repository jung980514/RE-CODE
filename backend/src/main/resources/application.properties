implementation 'io.github.cdimascio:dotenv-java:2.2.4'

# Application name
spring.application.name=recode

# MySQL database URL (host, port, database name)
#spring.datasource.url=jdbc:mysql://13.124.55.159:3306/project?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
#spring.datasource.username=root
#spring.datasource.password=admin

# === MySQL (local) \uC124\uC815 ===
spring.datasource.url=jdbc:mysql://${DB_IP}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# 0730 / \uBC31\uC5D4\uB4DC \uB3C4\uCEE4 \uC624\uB958 \uD574\uACB0\uC6A9 \uAD6C\uBB38 \uCD94\uAC00 __ INFRA
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# JPA settings
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# 0730 / \uBC31\uC5D4\uB4DC \uB3C4\uCEE4 \uC624\uB958 \uD574\uACB0\uC6A9 \uAD6C\uBB38 \uCD94\uAC00 __INFRA
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform


# AWS S3 settings
cloud.aws.region=ap-northeast-2
cloud.aws.s3.bucket=ssafy-recode-bucket
aws.s3.prefix=answer/

# Clova Speech \uC5F0\uB3D9 \uC815\uBCF4
clova.invoke-url-base=https://clovaspeech-gw.ncloud.com
clova.domain-code=${CLOVA_DOMAIN_CODE}
clova.domain-id=${CLOVA_DOMAIN_ID}
clova.secret-key=${CLOVA_SECRET_KEY}

# WebClient logging filter debug level
logging.level.com.ssafy.recode.global.filter.WebClientLoggingFilters=debug

# GMS (Google AI Studio / Gemini) settings
gms.api-key=${GMS_API_KEY}
gms.api-endpoint=https://generativelanguage.googleapis.com/v1beta/models

# Maximum upload file size (e.g., 1GB)
spring.servlet.multipart.max-file-size=1GB

server.port=8088

# Maximum request size (total upload capacity, e.g., 1GB)
spring.servlet.multipart.max-request-size=1GB


swagger.uri=/

#\uB85C\uADF8
logging.level[com.ssafy]=DEBUG
logging.pattern.console=%d{HH:mm:ss} [%level] %c{1}.%M.%L %m%n

# jwt secretkey
spring.jwt.secret=${JWT_SECRET}

# Kakao OAuth2 Config
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, account_email, profile_image
spring.security.oauth2.client.registration.kakao.client-name=Kakao

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id


spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=6379
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.lettuce.pool.max-active=10
spring.data.redis.lettuce.pool.max-idle=5
spring.data.redis.lettuce.pool.min-idle=1

# Redis \uAE30\uBCF8 \uC5F0\uACB0 \uC815\uBCF4
# Lettuce \uCEE4\uB125\uC158 \uD480 \uC124\uC815
spring.data.redis.timeout=2000
spring.data.redis.lettuce.pool.max-wait=3000

cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_KEY}

spring.config.import=optional:file:.env[.properties]