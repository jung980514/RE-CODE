worker_processes auto;

events {
    worker_connections 1024;
}

http {
    ## ── [로그 설정 강화] ─────────────────────────────────────────
    # Nginx 자체 상태코드와 upstream 상태코드를 함께 기록
    log_format with_upstream '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status -> upstream:$upstream_status '
                             'req_len:$request_length body_sent:$body_bytes_sent '
                             'rt:$request_time urt:$upstream_response_time '
                             '"$http_referer" "$http_user_agent"';
    access_log /var/log/nginx/access.log with_upstream;
    error_log  /var/log/nginx/error.log warn;

    ## ── [전역 기본값] ───────────────────────────────────────────
    client_max_body_size 1000m;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    ## 업로드/대응 타임아웃(대용량 업로드 안정화)
    client_body_timeout 600s;
    proxy_read_timeout  600s;
    proxy_send_timeout  600s;

    ## ── upstream 정의 ───────────────────────────────────────────
    upstream frontend { server frontend:3030; }
    upstream backend  { server backend:8088; }

    ## ── CORS 허용 도메인 맵 ─────────────────────────────────────
    map $http_origin $cors_origin {
        default                           "";
        http://localhost:3000             $http_origin;
        https://recode-my-life.site       $http_origin;
        https://www.recode-my-life.site   $http_origin;
    }

    ## ── 1) HTTP → HTTPS 리다이렉트 ─────────────────────────────
    server {
        listen      80 default_server;
        listen      [::]:80 default_server ipv6only=on;
        server_name recode-my-life.site www.recode-my-life.site;
        return      301 https://$host$request_uri;
    }

    ## ── 2) HTTP (catch-all) ─────────────────────────────────────
    server {
        listen      80;
        listen      [::]:80 ipv6only=on;
        server_name _;

        client_max_body_size 1000m;

        location / {
            proxy_pass         http://frontend;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        ## ── API + CORS ──────────────────────────────────────────
        location /api/ {
            ## 업로드 안정화 옵션
            client_max_body_size     1000m;     # location 레벨에도 명시
            proxy_request_buffering  off;       # 대용량 업로드 스트리밍
            proxy_http_version       1.1;

            # Preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin      $cors_origin always;
                add_header Access-Control-Allow-Methods     'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers     'Authorization, Content-Type, Accept' always;
                add_header Access-Control-Allow-Credentials 'true' always;
                add_header Access-Control-Max-Age           1728000 always;
                return 204;
            }

            # 실제 프록시
            proxy_pass         http://backend/api/;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            # 응답 헤더
            add_header Access-Control-Allow-Origin      $cors_origin always;
            add_header Access-Control-Allow-Credentials 'true' always;
        }

        location /health {
            access_log   off;
            default_type text/plain;
            return       200 'healthy\n';
        }

        location /swagger-ui/ {
            proxy_pass         http://backend/swagger-ui/;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }

    ## ── 3) HTTPS 서버 블록 ─────────────────────────────────────
    server {
        listen              443 ssl http2;
        listen              [::]:443 ssl http2 ipv6only=on;
        server_name         recode-my-life.site www.recode-my-life.site;

        client_max_body_size 1000m;

        ssl_certificate     /etc/letsencrypt/live/recode-my-life.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/recode-my-life.site/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        location / {
            proxy_pass         http://frontend;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        location /api/ {
            client_max_body_size     1000m;
            proxy_request_buffering  off;
            proxy_http_version       1.1;

            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin      $cors_origin always;
                add_header Access-Control-Allow-Methods     'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers     'Authorization, Content-Type, Accept' always;
                add_header Access-Control-Allow-Credentials 'true' always;
                add_header Access-Control-Max-Age           1728000 always;
                return 204;
            }

            proxy_pass         http://backend/api/;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin      $cors_origin always;
            add_header Access-Control-Allow-Credentials 'true' always;
        }

        location /health {
            access_log   off;
            default_type text/plain;
            return       200 'healthy\n';
        }
    }
}

