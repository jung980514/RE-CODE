worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    client_max_body_size 1000m;

    # 성능 최적화
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    keepalive_requests 1000;

    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 로깅 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 보안 헤더
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    resolver 127.0.0.11 valid=30s;

    # WebSocket connection upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Rate limiting for monitoring endpoints
    limit_req_zone $binary_remote_addr zone=monitoring:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;

    # Nginx 상태 정보를 노출하는 서버 (내부 통신용)
    server {
        listen 9113;
        server_name localhost;

        access_log off;
        allow 127.0.0.1;
        # allow 172.16.0.0/12; # Docker 네트워크 대역에 맞게 조정
        deny all;

        location /stub_status {
            stub_status;
        }
    }

    upstream frontend {
        server frontend:3030 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend {
        server backend:8088 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream prometheus {
        server prometheus:9090 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }

    upstream grafana {
        server grafana:3000 max_fails=2 fail_timeout=30s;
        keepalive 16;
    }

    # HTTP server that redirects to HTTPS
    server {
        listen 80;
        server_name recode-my-life.site www.recode-my-life.site;

        # 보안: 불필요한 정보 숨기기
        server_tokens off;

        # Let's Encrypt ACME challenge 경로만 허용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # 나머지 모든 요청은 HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name recode-my-life.site www.recode-my-life.site;
        server_tokens off;
        client_max_body_size 1000m;

        # SSL 설정 강화
        ssl_certificate /etc/letsencrypt/live/recode-my-life.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/recode-my-life.site/privkey.pem;

        # SSL 보안 설정
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS 설정
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # 프론트엔드 프록시
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            # 캐싱 설정
            proxy_cache_bypass $http_upgrade;
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
        }

        # API 엔드포인트 (Rate limiting 적용)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            client_max_body_size 1000m;

            # CORS 처리
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin http://localhost:3000 always;
                add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS always;
                add_header Access-Control-Allow-Headers Authorization,Content-Type always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type text/plain always;
                add_header Content-Length 0 always;
                return 204;
            }

            proxy_pass http://backend/api/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 개발용 CORS (프로덕션에서는 제거 권장)
            add_header Access-Control-Allow-Origin http://localhost:3000 always;
            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE always;
            add_header Access-Control-Allow-Credentials true always;

            # 타임아웃 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Swagger UI
        location /swagger-ui/ {
            proxy_pass http://backend/swagger-ui/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # OpenAPI 문서
        location ~ ^/v3/api-docs/?(.*)$ {
            proxy_pass http://backend/v3/api-docs/$1;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            add_header Content-Type text/plain always;
            return 200 "healthy\n";
        }

        # 백엔드 메트릭 엔드포인트
        location /actuator/prometheus {
            limit_req zone=monitoring burst=10 nodelay;

            # 내부 네트워크에서만 접근 허용 (선택사항)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;

            proxy_pass http://backend/actuator/prometheus;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 프로메테우스 웹 인터페이스
        location /prometheus/ {
            limit_req zone=monitoring burst=20 nodelay;

            # 인증이 필요한 경우 (선택사항)
            # auth_basic "Prometheus";
            # auth_basic_user_file /etc/nginx/.htpasswd;

            # 내부 네트워크에서만 접근 허용 (선택사항)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;

            proxy_pass http://prometheus/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 프로메테우스 특화 헤더
            proxy_set_header X-Forwarded-Uri $request_uri;

            # 타임아웃 설정 (쿼리 시간이 길 수 있음)
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # 리다이렉트 처리
            proxy_redirect ~^http://([^/]+)/(.*)$ https://$host/prometheus/$2;
        }

        location /grafana/ {
            proxy_pass         http://grafana/grafana/;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $host;
            proxy_set_header   X-Forwarded-Proto https;
            proxy_read_timeout 60s;
        }

        # /grafana 접근시 /grafana/로 리다이렉트
        location = /grafana {
            return 301 /grafana/;
        }

        # 그라파나 API 실시간 기능 (WebSocket)
        location ~ ^/grafana/api/live/(.*)$ {
            proxy_pass http://grafana/api/live/$1;
            proxy_http_version 1.1;

            # WebSocket 필수 헤더
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 표준 프록시 헤더
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Uri $request_uri;

            # WebSocket용 타임아웃
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;

            # 버퍼링 비활성화
            proxy_buffering off;
        }

        # 그라파나 정적 자산
        location ~ ^/grafana/public/(.*)$ {
            proxy_pass http://grafana/public/$1;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # 정적 자산 캐싱
            expires 1h;
            add_header Cache-Control "public, immutable";
        }

        # 그라파나 아바타/이미지
        location ~ ^/grafana/avatar/(.*)$ {
            proxy_pass http://grafana/avatar/$1;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # 이미지 캐싱
            expires 1d;
            add_header Cache-Control "public";
        }
    }

    # HTTP server that redirects to HTTPS for i13e105.p.ssafy.io
    server {
        listen 80;
        server_name i13e105.p.ssafy.io;
        server_tokens off;

        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server for i13e105.p.ssafy.io
    server {
        listen 443 ssl http2;
        server_name i13e105.p.ssafy.io;
        server_tokens off;
        client_max_body_size 1000m;

        # SSL certificates for i13e105.p.ssafy.io
        ssl_certificate /etc/letsencrypt/live/i13e105.p.ssafy.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/i13e105.p.ssafy.io/privkey.pem;

        # SSL 보안 설정
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }

        location /api/ {
            limit_req zone=api burst=20 nodelay;
            client_max_body_size 1000m;

            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin http://localhost:3000 always;
                add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS always;
                add_header Access-Control-Allow-Headers Authorization,Content-Type always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 1728000 always;
                return 204;
            }

            # 주의: 원본과 다름 - /api/를 유지해야 하는 경우 backend/api/로 변경
            proxy_pass http://backend/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin http://localhost:3000 always;
            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE always;
            add_header Access-Control-Allow-Credentials true always;
        }

        location /health {
            access_log off;
            add_header Content-Type text/plain always;
            return 200 "healthy\n";
        }

        location /actuator/prometheus {
            limit_req zone=monitoring burst=10 nodelay;
            proxy_pass http://backend/actuator/prometheus;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
        }

        location /prometheus/ {
            limit_req zone=monitoring burst=20 nodelay;
            proxy_pass http://prometheus/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Uri $request_uri;

            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            proxy_redirect ~^http://([^/]+)/(.*)$ https://$host/prometheus/$2;
        }

        location /grafana/ {
            proxy_pass         http://grafana/grafana/;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $host;
            proxy_set_header   X-Forwarded-Proto https;
            proxy_read_timeout 60s;
        }

        location = /grafana {
            return 301 /grafana/;
        }

        location ~ ^/grafana/api/live/(.*)$ {
            proxy_pass http://grafana/api/live/$1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_buffering off;
        }
    }
}