worker_processes auto;

events {
    worker_connections 1024;
}

http {
    client_max_body_size 1000m; 
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile           on;
    keepalive_timeout  65;

    # ───────── upstream 정의 ─────────
    upstream frontend {
        server frontend:3030;
    }
    upstream backend {
        server backend:8088;
    }

    # ───────── CORS 허용 도메인 매핑 ─────────
    map $http_origin $cors_origin {
        default                          "";
        http://localhost:3000           $http_origin;
        https://recode-my-life.site      $http_origin;
        https://www.recode-my-life.site  $http_origin;
    }

    # ───────── 1) HTTP → HTTPS 리다이렉트 ─────────
    server {
        listen      80 default_server;
        listen      [::]:80 default_server ipv6only=on;
        server_name recode-my-life.site www.recode-my-life.site;

        return      301 https://$host$request_uri;
    }

    # ───────── 2) HTTP (catch-all) ─────────
    server {
        listen      80;
        listen      [::]:80 ipv6only=on;
        server_name _;

        client_max_body_size 1000m;

        # 정적 파일 및 프론트엔드 애플리케이션 프록시
        location / {
            proxy_pass         http://frontend;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # API + CORS 처리
        location /api/ {
            # 1) Preflight(OPTIONS) 응답
            if ($request_method = 'OPTIONS') {
                client_max_body_size 1000m;           
                proxy_request_buffering off;  
                add_header Access-Control-Allow-Origin    $cors_origin always;
                add_header Access-Control-Allow-Methods   'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers   'Authorization, Content-Type, Accept' always;
                add_header Access-Control-Allow-Credentials 'true' always;
                add_header Access-Control-Max-Age         1728000 always;
                return 204;
            }

            # 2) 실제 API 요청 프록시
            proxy_pass         http://backend/api/;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            # 3) 응답 시 CORS 헤더 한 번만 추가
            add_header Access-Control-Allow-Origin    $cors_origin always;
            add_header Access-Control-Allow-Credentials 'true' always;
        }

        # 헬스체크 엔드포인트
        location /health {
            access_log   off;
            default_type text/plain;
            return       200 'healthy\n';
        }

        # Swagger UI 리버스 프록시 (필요 시)
        location /swagger-ui/ {
            proxy_pass         http://backend/swagger-ui/;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }

    # ───────── 3) HTTPS 서버 블록 ─────────
    server {
        listen              443 ssl http2;
        listen              [::]:443 ssl http2 ipv6only=on;
        server_name         recode-my-life.site www.recode-my-life.site;

        client_max_body_size 1000m;

        # SSL 설정
        ssl_certificate     /etc/letsencrypt/live/recode-my-life.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/recode-my-life.site/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # 정적 파일 및 프론트엔드 애플리케이션 프록시
        location / {
            proxy_pass         http://frontend;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # API + CORS 처리 (HTTPS)
        location /api/ {
            if ($request_method = 'OPTIONS') {
                client_max_body_size 1000m;           
                proxy_request_buffering off;  
                add_header Access-Control-Allow-Origin    $cors_origin always;
                add_header Access-Control-Allow-Methods   'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers   'Authorization, Content-Type, Accept' always;
                add_header Access-Control-Allow-Credentials 'true' always;
                add_header Access-Control-Max-Age         1728000 always;
                return 204;
            }

            proxy_pass         http://backend/api/;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin    $cors_origin always;
            add_header Access-Control-Allow-Credentials 'true' always;
        }

        # 헬스체크 엔드포인트
        location /health {
            access_log   off;
            default_type text/plain;
            return       200 'healthy\n';
        }
    }
}
